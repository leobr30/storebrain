import {
  Controller,
  Post,
  Body,
  Get,
  Param,
  BadRequestException,
  UseGuards,
  InternalServerErrorException,
  NotFoundException,
  HttpException,
  HttpStatus,
  Res,
} from '@nestjs/common';
import { Response } from 'express';
import { FormsService } from './forms.service';
import { PdfService } from '../pdf/pdf.service';
import { MailService } from '../mail/mail.service';
import { PrismaService } from '../prisma/prisma.service';

interface SaveEmployeeResponseDTO {
  userId: string;
  formId: string;
  responses: any;
  comment?: string;
}

interface CreateFormDTO {
  title: string;
  comment?: string;
  sections: {
    title: string;
    items: {
      label: string;
      selected?: boolean;
    }[];
  }[];
}

@Controller('forms')
export class FormsController {
  constructor(
    private readonly formsService: FormsService,
    private readonly pdfService: PdfService,
    private readonly mailService: MailService,
    private readonly prisma: PrismaService,
  ) { }


  @Get(':formId/download-pdf')
  async downloadPdf(@Param('formId') formId: string, @Res() res: Response) {
    try {
      console.log(`üì• T√©l√©chargement du PDF pour formId: ${formId}`);

      // üîç R√©cup√©rer les donn√©es du formulaire
      const formData = await this.formsService.getFormWithResponses(formId);
      if (!formData) {
        throw new NotFoundException("Formulaire non trouv√©.");
      }

      // üìÑ G√©n√©rer le PDF
      const pdfBuffer = await this.pdfService.generateEmployeeCreatedPdf(formData, `form_${formId}.pdf`);
      if (!pdfBuffer || pdfBuffer.length === 0) {
        throw new InternalServerErrorException("Erreur lors de la g√©n√©ration du PDF.");
      }

      // ‚úÖ Envoie du fichier PDF
      res.set({
        'Content-Disposition': `attachment; filename="form_${formId}.pdf"`,
        'Content-Type': 'application/pdf',
      });

      res.send(pdfBuffer);
    } catch (error) {
      console.error("‚ùå Erreur dans downloadPdf:", error);
      throw new HttpException(error.message || 'Erreur interne', error.status || HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }



  @Get('history/:userId')
  async getHistoryByUser(@Param('userId') userId: string) {
    const numericUserId = Number(userId);

    if (isNaN(numericUserId)) {
      console.error("‚ùå Erreur: userId invalide dans la requ√™te :", userId);
      throw new BadRequestException('userId doit √™tre un nombre valide.');
    }

    const history = await this.formsService.getHistoryByUser(numericUserId);
    return history;
  }

  @Post('history')
  async saveFormToHistory(
    @Body() { userId, formId, responses, comment }: { userId: number; formId: string; responses: any; comment?: string },
  ) {
    try {
      return this.formsService.saveFormToHistory(userId, formId, responses, comment);
    } catch (error) {
      throw new HttpException(error.message, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Get(':responseId')
  async getResponseById(@Param('responseId') responseId: string) {
    try {
      console.log(`üîç Recherche de la r√©ponse avec responseId: ${responseId}`);

      const response = await this.formsService.getResponseById(responseId);

      if (!response) {
        console.warn(`‚ö†Ô∏è Aucune r√©ponse trouv√©e pour responseId: ${responseId}`);
        throw new NotFoundException('Aucune r√©ponse trouv√©e.');
      }

      console.log("‚úÖ R√©ponse trouv√©e :", response);
      return response;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la r√©ponse:', error);
      throw new InternalServerErrorException("Erreur serveur lors de la r√©cup√©ration de la r√©ponse.");
    }
  }


  @Get('test-pdf')
  async testPdfGeneration() {
    try {
      console.log("üîç Test de g√©n√©ration du PDF...");
      const pdfBuffer = await this.pdfService.generateEmployeeCreatedPdf({}, 'test-generated.pdf');
      console.log("‚úÖ PDF g√©n√©r√© avec succ√®s !");
      return { message: 'Test PDF generated successfully' };
    } catch (error) {
      console.error("‚ùå Erreur lors de la g√©n√©ration du PDF:", error);
      throw new HttpException('Erreur de g√©n√©ration du PDF', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }


  @Post(':responseId/generate-pdf-email')
  async generatePdfAndSendEmail(@Param('responseId') responseId: string) {
    try {
      console.log(`üì© D√©but de la g√©n√©ration du PDF pour responseId: ${responseId}`);

      const response = await this.formsService.getResponseById(responseId);
      console.log("üîç Donn√©es retourn√©es par getResponseById :", response);

      if (!response) {
        console.error(`‚ùå Aucune r√©ponse trouv√©e pour responseId: ${responseId}`);
        throw new NotFoundException('Response not found');
      }

      console.log("‚úÖ R√©ponse trouv√©e, g√©n√©ration du PDF...");
      const pdfBuffer = await this.pdfService.generateEmployeeCreatedPdf(response, 'generated.pdf');

      if (!pdfBuffer || pdfBuffer.length === 0) {
        console.error("‚ùå √âchec de la g√©n√©ration du PDF");
        throw new HttpException('Error generating PDF', HttpStatus.INTERNAL_SERVER_ERROR);
      }

      console.log("‚úÖ PDF g√©n√©r√© avec succ√®s, envoi de l'email...");
      await this.mailService.sendEmployeeFormMail(
        'gabriel.beduneau@diamantor.fr',
        { fileName: 'formulaire.pdf', mimeType: 'application/pdf', filePath: 'generated.pdf' },
        response.form.title,
        response.userId.toString(),
        response.user.lastName.toString(),
        response.user.firstName
      );

      console.log("üì© Email envoy√© avec succ√®s !");
      return { message: 'PDF generated and email sent successfully' };

    } catch (error) {
      console.error("‚ùå Erreur dans generatePdfAndSendEmail:", error);
      throw new HttpException(error.message || 'Internal server error', error.status || HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }



  @Get()
  async getLatestForm() {
    try {
      console.log('üì¢ Tentative de r√©cup√©ration du formulaire...');

      const form = await this.prisma.form.findFirst({
        orderBy: { createdAt: 'desc' },
        include: { sections: { include: { items: true } } },
      });

      if (!form) {
        console.warn('‚ö†Ô∏è Aucun formulaire trouv√©.');
        throw new NotFoundException('Aucun formulaire trouv√©.');
      }

      console.log('‚úÖ Formulaire r√©cup√©r√© :', form);
      return form;
    } catch (error) {
      console.error('‚ùå ERREUR SERVER :', error);
      throw new InternalServerErrorException('Erreur lors de la r√©cup√©ration du formulaire.');
    }
  }

  @Post()
  async createForm(@Body() data: CreateFormDTO) {
    console.log('üîπ Donn√©es re√ßues pour la cr√©ation du formulaire:', JSON.stringify(data, null, 2));

    if (!data.title || !data.sections || data.sections.length === 0) {
      console.error('‚ùå Erreur : Le titre et au moins une section sont requis.');
      throw new BadRequestException('Le titre et au moins une section sont requis.');
    }

    try {
      const form = await this.prisma.form.create({
        data: {
          title: data.title,
          comment: data.comment ?? '',
          sections: {
            create: data.sections.map((section: any) => ({
              title: section.title,
              items: {
                create: section.items.map((item: any) => ({
                  label: item.label,
                  selected: item.selected ?? false,
                })),
              },
            })),
          },
        },
        include: { sections: { include: { items: true } } },
      });

      console.log('‚úÖ Formulaire cr√©√© avec succ√®s:', form);
      return form;
    } catch (error) {
      console.error('‚ùå ERREUR SERVER :', error);
      throw new InternalServerErrorException("Erreur lors de l'enregistrement du formulaire");
    }
  }
}

@Controller('employee-responses')
export class EmployeeResponsesController {
  constructor(private readonly prisma: PrismaService) { }

  @Post()
  async saveEmployeeResponse(@Body() data: SaveEmployeeResponseDTO) {
    try {
      console.log('üì¢ Donn√©es re√ßues :', data);

      if (!data.userId || isNaN(Number(data.userId))) {
        throw new BadRequestException('userId est invalide.');
      }

      const userExists = await this.prisma.user.findUnique({
        where: { id: Number(data.userId) },
      });

      if (!userExists) {
        throw new BadRequestException("L'utilisateur sp√©cifi√© n'existe pas.");
      }

      const response = await this.prisma.employeeResponse.create({
        data: {
          userId: Number(data.userId),
          formId: data.formId,
          responses: data.responses,
          comment: data.comment || '',
        },
      });

      console.log('‚úÖ R√©ponses enregistr√©es avec succ√®s :', response);
      return response;
    } catch (error) {
      console.error('‚ùå ERREUR SERVER :', error);
      throw new InternalServerErrorException("Erreur lors de l'enregistrement des r√©ponses.");
    }
  }
}
